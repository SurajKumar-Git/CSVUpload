<main class="container mt-4" id="csv-view-container">
  <h3 class="fs-3 mb-3"><%= filename %></h3>
  <div id="csv-content" v-if="originalRecords.length > 0">
    <div class="search-form input-group mb-3">
      <div>
        <input v-model="searchInput" type="text" class="form-control" id="searchInput" placeholder="Enter text to be searched" @keyup.enter="search">
      </div>
      <select v-model="searchByHeaderInput" class="form-select">
        <option :value="index" v-for="(col, index) in headers">
          {{ col }}
        </option>
      </select>
      <button class="btn btn-outline-secondary" type="button" @click="search">Search</button>
    </div>
    <table class="table table-hover ">
      <thead>
        <tr>
          <th v-for="(colHead, index) in headers" class="pointer" @click="sortBy(index)">
            {{ colHead }} <i class="fa-solid fa-sort ps-2"></i>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="row in pageRecords">
          <td v-for="col in row">
            {{ col }}
          </td>
        </tr>
      </tbody>
    </table>
    <nav class="mt-4">
      <ul class="pagination">
        <li class="page-item" v-bind:class="{disabled : currentPage == 1, pointer : currentPage != 1}" @click="previousPage">
          <a class="page-link">
            <span>&laquo;</span>
          </a>
        </li>
        <li v-for="page in totalPages" class="page-item" v-bind:class="{active : currentPage == page, pointer : currentPage != page}" @click=toPage(page)>
          <a class="page-link">
            {{ page }}
          </a>
        </li>
        <li class="page-item" v-bind:class="{disabled : currentPage == totalPages, pointer : currentPage != totalPages}" @click="nextPage">
          <a class="page-link">
            <span>&raquo;</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
</main>

<script type="module">
  // Vue Library to Handle Display, Search, Sort, Pagination of Data.
  import {
    createApp
  } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.prod.js'

  createApp({
    data() {
      return {
        originalRecords: [],
        filteredRecords: [],
        recordStartIndex: 0,
        recordEndIndex: 100,
        currentPage: 1,
        rowLimit: 100,
        sortOrder: [],
        searchInput: "",
        searchByHeaderInput: 0,
      }
    },
    computed: {
      headers() {
        return this.originalRecords[0];
      },
      totalPages() {
        return Math.ceil(this.filteredRecords.length / this.rowLimit);
      },
      pageRecords() {
        return this.filteredRecords.slice(this.recordStartIndex, this.recordEndIndex);
      }
    },
    methods: {
      updateRecordIndex() {
        this.recordStartIndex = (this.currentPage - 1) * this.rowLimit;
        this.recordEndIndex = this.recordStartIndex + this.rowLimit;
        this.scrollToTop();
      },
      previousPage() {
        if (this.currentPage == 1) {
          return;
        }
        this.currentPage -= 1;
        this.updateRecordIndex();
      },
      nextPage() {
        if (this.currentPage == this.totalPages) {
          return;
        }
        this.currentPage += 1;
        this.updateRecordIndex();
      },
      toPage(page) {
        this.currentPage = page;
        this.updateRecordIndex();
      },
      sortBy(columnIndex) {
        // Toggling sort, by keeping sortOrder boolean variable
        // True: Asc and False: desc
        this.filteredRecords.sort((a, b) => {
          if (this.sortOrder[columnIndex]) {
            if (isNaN(a[columnIndex]) || isNaN(b[columnIndex])) {
              return a[columnIndex] > b[columnIndex];
            } else {
              return parseInt(a[columnIndex]) > parseInt(b[columnIndex]);
            }
          } else {
            if (isNaN(a[columnIndex]) || isNaN(b[columnIndex])) {
              return a[columnIndex] < b[columnIndex];
            } else {
              return parseInt(a[columnIndex]) < parseInt(b[columnIndex]);
            }
          }
        });
        // Negating sortOrder
        this.sortOrder[columnIndex] = !this.sortOrder[columnIndex];
        this.resetToPage1();
      },
      search() {
        const searchInput = this.searchInput.trim();
        const col = this.searchByHeaderInput;

        if (searchInput === "") {
          this.filteredRecords = this.originalRecords.slice(1);
          this.resetToPage1();
          return;
        }

        let searchedRecords = [];
        const searchInputRE = new RegExp(searchInput, "i")
        for (let record of this.originalRecords.slice(1)) {
          if (record[col].search(searchInputRE) != -1) {
            searchedRecords.push(record);
          }
        }
        this.filteredRecords = searchedRecords;
        this.resetToPage1();
      },
      resetToPage1() {
        this.currentPage = 1;
        this.updateRecordIndex();
      },
      scrollToTop() {
        window.scrollTo(0, 0);
      }
    },
    mounted() {
      // Inserted data using EJS into JS
      this.originalRecords = <%- JSON.stringify(records) %>;
      this.filteredRecords = this.originalRecords.slice(1);
      this.sortOrder = this.originalRecords[0].map(() => true);
      this.loading = false;
    }
  }).mount("#csv-view-container");
</script>